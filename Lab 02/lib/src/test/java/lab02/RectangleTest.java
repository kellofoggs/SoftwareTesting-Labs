/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lab02;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.ValueSource;

import static org.junit.jupiter.api.Assertions.*;


import java.util.Arrays;

class RectangleTest {

    @Test
    void testHarnessWorking() {
        assertTrue(true);
    }


    @ParameterizedTest
    @CsvSource(
            {"'Hello', 5",
            "'Goodbye', 7",
            "'Hi', 2"
    })
    void testStringLength(String string, int expected){
        Rectangle r = new Rectangle();
        assertEquals( expected, r.stringLength(string) );
    }

    @ParameterizedTest
    @CsvSource({
            "'racecar', 'true'",
            "'not', 'false'"})
    void palindDromeTest(String string, boolean expected){
        Rectangle r = new Rectangle();
        assertEquals(r.palindromeCheck(string), expected );

    }
    @ParameterizedTest
    @CsvSource({ "3, 6"

    })
    void factorialTest(int input, int expected){
        Rectangle r = new Rectangle();
        assertEquals(expected,r.factorialProgram(input));
    }

    @Test
    void createDefaultRect() {
        Rectangle r = new Rectangle();
        assertEquals(1, r.getWidth());
        assertEquals(1, r.getHeight());
        assertEquals(0, r.getX());
        assertEquals(0, r.getY());
    }

    @Test
    void customRectangle() {
        Rectangle r = new Rectangle(5, 5, 10, 10);
        assertEquals(5, r.getX());
        assertEquals(5, r.getY());
        assertEquals(10, r.getWidth());
        assertEquals(10, r.getHeight());
    }

    @Test
    void changeWidthValid() {
        Rectangle r = new Rectangle(5, 5, 10, 10);
        r.setWidth(20);
        assertEquals(20, r.getWidth());
    }

    @Test
    void changeWidthNegative() {
        Rectangle r = new Rectangle(5, 5, 10, 10);
        assertThrows(IllegalArgumentException.class, () -> {r.setWidth(-10);});
    }
    @Test
    void changeHeightValid(){
        Rectangle r = new Rectangle(5, 5, 10, 10);
        r.setWidth(20);
        assertEquals(20, r.getWidth());

    }

    @Test
    void changeHeightNegative(){
        Rectangle r = new Rectangle(5, 5, 10, 10);
        assertThrows(IllegalArgumentException.class, () -> {r.setHeight(-10);});

    }

    @Test
    void changeXValid(){
        Rectangle r = new Rectangle();
        r.setX(10);
        assertEquals( 10 ,r.getX());
    }

    @Test
    void changeYValid(){
        Rectangle r = new Rectangle();
        r.setY(10);
        assertEquals( 10 ,r.getY());
    }

    @Test

    void changeYNegative(){
        Rectangle r = new Rectangle();
        assertThrows( IllegalArgumentException.class, () -> {r.setY(-10);});
    }
    @Test
    void changeXNegative(){
        Rectangle r = new Rectangle();
        assertThrows( IllegalArgumentException.class, () -> {r.setX(-10);});
    }

    @Test
    void twoEqualRectangles(){
        Rectangle rectOne = new Rectangle(5, 10, 10,10);
        Rectangle rectTwo = new Rectangle(10, 10, 10,10);
        assertTrue(rectOne.equals(rectTwo));
    }

    @Test
    void twoUnequalRectangles(){
        Rectangle rectOne = new Rectangle(5, 10, 5,3);
        Rectangle rectTwo = new Rectangle(10, 10, 4,6);
        assertTrue(!rectOne.equals(rectTwo));
    }
    /*
    @Test
    changeWidthInvalid(){
        assertThrows(IllegalArgumentException.class, () -> (r.setWidth(-20)));//Put inside lambda statement to assure exception does not escape
    }*/
}
